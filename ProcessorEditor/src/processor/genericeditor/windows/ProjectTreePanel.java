/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package processor.genericeditor.windows;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JDialog;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import processor.core.rules.RuleCluster;
import processor.core.conditions.FilePrototype;
import processor.core.file.Profile;

/**
 *
 * @author cbaez
 */
public class ProjectTreePanel extends javax.swing.JPanel {
    Profile profile;
    
    /**
     * Creates new form ProjectTreePanel
     */
    public ProjectTreePanel(Profile profile) {
        initComponents();
        this.profile = profile;
       
        loadNodesData(profile);
    }

    public void loadNodesData(Profile p){
        projectsTree.setRootVisible(false);
        DefaultTreeModel model = (DefaultTreeModel) projectsTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        
        DefaultMutableTreeNode profileChild = new DefaultMutableTreeNode(p);
        model.insertNodeInto(profileChild, root, 0);
        
        //Filling Cleaners
        DefaultMutableTreeNode cleanersChildren = new DefaultMutableTreeNode("Cleaners");
        p.getCleaners().forEach(c -> {
            DefaultMutableTreeNode cleanerNode = new DefaultMutableTreeNode(c);
            if(c.getPrototype() != null){
                DefaultMutableTreeNode prototypeNodeParent = new DefaultMutableTreeNode("Prototype");
                prototypeNodeParent.add(new DefaultMutableTreeNode(c.getPrototype()));
                cleanerNode.add(prototypeNodeParent);
            }
            
            c.getRules().forEach(r -> {
                DefaultMutableTreeNode ruleNode = new DefaultMutableTreeNode(r);
                cleanerNode.add(ruleNode);
            });
            
            
            cleanersChildren.add(cleanerNode);
        });
        profileChild.add(cleanersChildren);
        
        
        
        //Filling prototypes
        DefaultMutableTreeNode prototypesChildren =  new DefaultMutableTreeNode("Prototypes");
        
        p.getPrototypes().forEach(proto -> {
            DefaultMutableTreeNode protoNode = new DefaultMutableTreeNode(proto);
            proto.getExpressions().forEach(e -> {
                protoNode.add(new DefaultMutableTreeNode(e));
            });
            prototypesChildren.add(new DefaultMutableTreeNode(proto));
            //model.insertNodeInto(new DefaultMutableTreeNode(proto), prototypesChildren, prototypesChildren.getChildCount());
        });
        profileChild.add(prototypesChildren);
        
        
        
        
        projectsTree.expandPath(new TreePath(prototypesChildren.getPath()));
        
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        projectsTree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        projectsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        projectsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                projectsTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(projectsTree);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void projectsTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_projectsTreeMouseClicked
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) projectsTree.getLastSelectedPathComponent();
        Object userObject = node.getUserObject();
        if(userObject instanceof FilePrototype){
            System.out.println("Selected a prototype: " + ((FilePrototype) userObject));
        }
        if(userObject instanceof RuleCluster){
            System.out.println("Selected a cleaner: " + ((RuleCluster) userObject));
        }
    }//GEN-LAST:event_projectsTreeMouseClicked

    class NodeSelectedListener extends MouseAdapter{
        @Override
        public void mouseClicked(MouseEvent e){
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) projectsTree.getLastSelectedPathComponent();
            Object userObject = node.getUserObject();
            if (userObject instanceof FilePrototype) {
                System.out.println("Selected a prototype: " + ((FilePrototype) userObject));
            }
            if (userObject instanceof RuleCluster) {
                System.out.println("Selected a cleaner: " + ((RuleCluster) userObject));
            }
        }
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree projectsTree;
    // End of variables declaration//GEN-END:variables
}
