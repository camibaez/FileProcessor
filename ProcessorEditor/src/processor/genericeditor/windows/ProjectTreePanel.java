/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package processor.genericeditor.windows;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import processor.core.file.Profile;

/**
 *
 * @author cbaez
 */
public class ProjectTreePanel extends javax.swing.JPanel {
    Profile profile;
    
    /**
     * Creates new form ProjectTreePanel
     */
    public ProjectTreePanel(Profile profile) {
        initComponents();
        this.profile = profile;
        projectsTree.setRootVisible(false);
    }

    public void loadNodesData(Profile p){
        DefaultTreeModel model = (DefaultTreeModel) projectsTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        
        DefaultMutableTreeNode profileChild = new DefaultMutableTreeNode(p);
        model.insertNodeInto(profileChild, root, 0);
        
        //Filling prototypes
        DefaultMutableTreeNode prototypesChildren =  new DefaultMutableTreeNode("Prototypes");
        p.getPrototypes().forEach(proto -> {
            DefaultMutableTreeNode protoNode = new DefaultMutableTreeNode(proto);
            proto.getExpressions().forEach(e -> {
                protoNode.add(new DefaultMutableTreeNode(e));
            });
            prototypesChildren.add(new DefaultMutableTreeNode(proto));
            //model.insertNodeInto(new DefaultMutableTreeNode(proto), prototypesChildren, prototypesChildren.getChildCount());
        });
        model.insertNodeInto(prototypesChildren, profileChild, 0);
        
        
        //Filling Cleaners
        DefaultMutableTreeNode cleanersChildren = new DefaultMutableTreeNode("Cleaners");
        p.getCleaners().forEach(c -> {
            DefaultMutableTreeNode cleanerNode = new DefaultMutableTreeNode(c);
            if(c.getPrototype() != null){
                DefaultMutableTreeNode prototypeNode = new DefaultMutableTreeNode(c.getPrototype());
                model.insertNodeInto(prototypeNode, cleanerNode, 0);
            }
            
            c.getRules().forEach(r -> {
                DefaultMutableTreeNode ruleNode = new DefaultMutableTreeNode(r);
                model.insertNodeInto(ruleNode, cleanerNode, cleanerNode.getChildCount());
            });
            
            
            model.insertNodeInto(cleanerNode, cleanersChildren, cleanersChildren.getChildCount());
        });
        model.insertNodeInto(cleanersChildren, profileChild, 1);
        projectsTree.expandPath(new TreePath(prototypesChildren.getPath()));
        
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        projectsTree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(projectsTree);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree projectsTree;
    // End of variables declaration//GEN-END:variables
}
