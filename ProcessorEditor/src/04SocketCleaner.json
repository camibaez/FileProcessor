{
    "nodes": [{
            "pattern": "*.jsp",
            "class": "FilePattern",
            "id": "jspExtFilter",
            "type": "Condition",
            "active": true
        }, {
            "pattern": "*.java",
            "class": "FilePattern",
            "id": "javaExtFilter",
            "type": "Condition",
            "active": true
        }, {
            "pattern": "\\s?(mc[a-zA-Z0-9]*)\\s*=\\s*new\\s*MessageContext\\((\\s|.)*?\\);",
            "replace": " $1 = new MessageContext(getMessageHandler(\"<cleaner#pname>\"));",
            "flags": 0,
            "class": "ReplaceText",
            "id": "cleanMC",
            "type": "Action",
            "active": true
        }, {
            "code": "    var progPattern = \/public\\s+class\\s+JS([A-Za-z0-9]{7})\/;\n    var found = target.match(progPattern);\n    if (Array.isArray(found) && found.length > 1) {\n        var pName = found[1];\n        var pHolder = \/<cleaner#pname>\/g;\n        target = target.replace(pHolder, pName);\n    }\n    \n    return target;\n\n\n\/*\nvar pHolder = new RegExp(\"<cleaner#pname>\");\nwhile ((match = pHolder.exec(target)) != null) {\n    var i = match.index;\n    var JavaParser = Java.type('processor.core.graph.jslinker.JavaParser');\n    var scope = JavaParser.getMethodScopeOf(target, i);\n    if (!Array.isArray(scope) || !scope.length) {\n  \tcontinue;\n    }\n    var codePiece = target.substring(scope[0], scope[1]);\n    var codePiece = codePiece.substring(codePiece.indexOf(\"{\"));\n    var pattern = \/([A-Z][A-Z0-9]{6})(.*Message)\/;\n    var found = codePiece.match(pattern);\n    if (found.length > 0) {\n        var pName = found[1];\n        target = target.replace(\"<cleaner#pname>\", pName);\n    }\n}\n\nreturn target;\n*\/",
            "class": "ExecutableAction",
            "id": "progrExtractor",
            "type": "Action",
            "active": true
        }, {
            "code": "    function extractVarName(target) {\n        var pattern = \/\\sSocket\\s+([a-zA-Z_$][a-zA-Z_$0-9]*)\\s*(=|;)\/;\n        var found = pattern.exec(target);\n        if (Array.isArray(found) && found.length > 1) {\n            return [found[1], found.index];\n        }\n        return null;\n    }\n   \n    var extractResult = extractVarName(target);\n    if (extractResult == null) {\n        print(\"\\n ==> Error 1\");\n        return target;\n    }\n\n    var varName = extractResult[0];\n    var varIndex = extractResult[1];\n    \n    var JavaParser = Java.type('processor.core.graph.jslinker.JavaParser');\n    var scope = JavaParser.getMethodScopeOf(target, varIndex);\n    if (!scope.length) {\n        var pattern  = new RegExp(varName + \"\\\\s*=\\\\s*new\\\\s*Socket\\\\(\");\n        var found = pattern.exec(target);\n        if (found != null) {\n            varIndex = found.index;\n            scope = JavaParser.getMethodScopeOf(target, varIndex);\n        }else{\n            return target;\n        } \n    }\n    varIndex = scope[0];\n    var endScopeIndex = scope[1];\n    print(\"\\n\" + varIndex + \",\" + endScopeIndex);\n    var stringPreSpace = target.substring(0, varIndex);\n    var stringSpace = target.substring(varIndex, endScopeIndex);\n    var stringPostSpace = target.substring(endScopeIndex);\n    var regsLists = [\n        [new RegExp(\"Socket\\\\s+\" + varName + \"\\\\s*=\\\\s*null\\\\s*;\", 'g'), \"\"],\n        [new RegExp(\"(Socket)?.*\" + varName + \"\\\\s*=\\\\s*new\\\\s*Socket\\\\(.*?;\", 'g'), \"\"],\n        [new RegExp(\"([^a-zA-Z0-9_])\" + varName + \"\\\\..*?;\", 'g'), \"$1\"],\n   \t[new RegExp(\"if\\\\s*\\\\(\\\\s*\" + varName + \"\\\\s*(!|=)=\\\\s*null\\\\s*\\\\)\", 'g'), \"\"]\n    ]\n     print(\"\\nReg: \" + \"if\\s*\\(\\s*\" + varName + \"\\s*(!|=)=\\s*null\\s*\\)\");\n\n    for (var i = 0; i < regsLists.length; i++) {\n        var pattern = regsLists[i][0];\n        var replace = regsLists[i][1];\n        stringSpace = stringSpace.replace(pattern, replace);\n    }\n\n    return target = stringPreSpace + stringSpace + stringPostSpace;\n\n",
            "class": "ExecutableAction",
            "id": "remSocketRef",
            "type": "Action",
            "active": true
        }, {
            "code": "var pattern = \/extends .*(JSEIBS|Super)Servlet\/;\nvar res = pattern.test(target);\n\nreturn res;",
            "class": "ExecutableCondition",
            "id": "serveltExecCond",
            "type": "Condition",
            "active": true
        }],
    "lastWorkingDirectory": null,
    "name": null,
    "description": null,
    "graph": "strict digraph G {\r\n  START_NODE [ label=\"START_NODE\" ];\r\n  END_NODE [ label=\"END_NODE\" ];\r\n  FAIL_NODE [ label=\"FAIL_NODE\" ];\r\n  jspExtFilter [ label=\"jspExtFilter\" ];\r\n  javaExtFilter [ label=\"javaExtFilter\" ];\r\n  cleanMC [ label=\"cleanMC\" ];\r\n  progrExtractor [ label=\"progrExtractor\" ];\r\n  remSocketRef [ label=\"remSocketRef\" ];\r\n  serveltExecCond [ label=\"serveltExecCond\" ];\r\n  START_NODE -> jspExtFilter [ label=\"et1368261153\" ];\r\n  serveltExecCond -> cleanMC [ label=\"et518521759\" ];\r\n  serveltExecCond -> FAIL_NODE [ label=\"ef1076411994\" ];\r\n  remSocketRef -> END_NODE [ label=\"et1173612748\" ];\r\n  javaExtFilter -> serveltExecCond [ label=\"et485648587\" ];\r\n  javaExtFilter -> FAIL_NODE [ label=\"ef604524668\" ];\r\n  jspExtFilter -> FAIL_NODE [ label=\"et640515299\" ];\r\n  jspExtFilter -> javaExtFilter [ label=\"ef802600253\" ];\r\n  progrExtractor -> remSocketRef [ label=\"et911102602\" ];\r\n  cleanMC -> progrExtractor [ label=\"et830125810\" ];\r\n}\r\n"
}